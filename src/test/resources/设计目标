单表的增删改查，使用通用接口，减少冗余配置。
多表关联查询，使用xml配置sql语句。
单表的查询，支持分页。
单表的添加、删除、修改，支持批量操作。
方案一：编写mybatis插件，用Executor插件拦截实现。
方案二：编写mybatis插件，用StatementHandler插件拦截实现。
	新发现，设置参数调用statementHandler.getParameterHandler().setParameters(countStmt);!!!
方案三：修改mybatis-generator插件。
方案四：修改mybatis源码，将自定义的内容与自动生成的内容分离。
方案五：修改mybatis源码，使SqlProvider支持带标签的形式。
方案六：使用maven插件。自动生成sqlprovider.

比较：
方案一,需要深入mybais核心，难度非常大。bug难以控制。Executor拦截之后，能够获取到充分的信息（包括静态信息类名、字段属性映射和运行时信息方法参数值等）
但是不知道怎么修改sql语句。而且这时候的sql语句已经不是带xml标签形式。
方案二,StatementHanlder拦截器能够让我们拦截到需要执行的sql语句，并允许我们重写sql。但是和方案一一样，需要根据运行时的方法参数，构造sql语句。
需要解决非常麻烦的参数类型处理的问题(已找到办法解决)，而且用java拼sql可维护性较差。可以用SQL类构造sql语句。
方案三,生成的代码，属于静态代码，可以人工进行审核，容易诊断bug。但是没有解决配置极其相似或者相同的重复问题。
而且没有解决自动生成的配置和自定义sql隔离的问题。
方案四，使mybatis加载映射文件时，从多个文件加载内容合并。可以解决配置分离问题，但是没有对

 * 修改mybatis的源代码，在mybatis加载mapper.xml时，从模板文件中读取内容，然后和mapper.xml合并提供给mybatis使用。
 * 但是模板中需要的表名，表字段和实体属性映射，在创建Configuration之前无法获取。但是创建Configuration之后又无法
 * 合并mapper.xml文件。
 * 可以用另一种方法：写一个main方法（或者做成maven插件），
 * 启动mybatis，这样就可以获取上下文了。然后合并模板文件和mapper.xml。但是这样仍然没有解决代码冗余的问题。
 * 

